import React, { useEffect, useState } from "react";
import ColorfulMessage from "./components/ColorfulMessage";

export const App = () => {
  const [faceShowFlag, setFaceShowFlag] = useState(true);
  const [num, setNum] = useState(false);

  // 動的に変わる部分でuseStateする
  const onClickCountUp = () => {
    setNum(num + 1);
  };

  // 上記で初期値を読み込んで、以下の関数をClickで呼び出して再レンダリングを行う
  const onClickSwitchShowFlag = () => {
    setFaceShowFlag(!faceShowFlag);
  };

  // Too many re-renders. 出たらstate変更周りに注意する
  // ロジックの衝突が生じた場合は関心の分離をしたい、。この場合はnumだけ
  // useEffect(() => {}, []); 最初の一回だけ動かしたい時に使うことがある
  useEffect(() => {
    if (num > 0 && num % 3 === 0) {
      faceShowFlag || setFaceShowFlag(true);
    } else {
      faceShowFlag && setFaceShowFlag(false);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [num]); // 怒られるのはfaceFlagがあるが、関心お分離的には正しい

  // react-hooksでstateがあっても関数コンポーネントでかけるようになって習得しやすくなったとか

  return (
    <>
      <h1 style={{ color: "red" }}>こんにちは</h1>
      <ColorfulMessage color="blue" message="お元気ですか？" />
      <ColorfulMessage color="pink" message="元気です" />
      <button onClick={onClickCountUp}>カウントアップ</button>
      <br />
      <button onClick={onClickSwitchShowFlag}>on/off</button>
      <p>{num}</p>

      {faceShowFlag && <p>(*_*)</p>}
    </>
  );
};
